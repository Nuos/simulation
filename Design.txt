Questions:
----------
* How to properly handle different scales?
  * framebuffer (distance buffer) issues w/ FP precision

Goals:
------
* Rendering Engine:
  * multiple scales: close to objects<->astronomical scales
    * Solar Systems
    * Planets
    * Landscapes
    * Rocks/Trees/Caves/lakes/rivers
    * Particles
  * tunable rendering options:
    * different shader types
    * different effects (particles, atmo, etc.)
    * tessellation
* Terrain Generation:
  * possible evolution/deformation?
    * mountains -> climate -> lakes/rivers -> erosion?
  * Handles many parameters:
    * biome
    * planetary climate
    * tessellation level
  * ability to save output of generation
* Physics Engine:
  * Modular for each area of physics:
    * fluids
    * gravity
    * collisions
    * aero
  * each module can be swapped with a different module?
  * Integration with standards for:
    * physx
    * jsbsim
    * beamNG

Next Steps:
-----------
* Camera that can fly around freely: better movement than the current controls
* Multiple objects:
  * Earth
  * Moon
  * Sun
* View Frustum Culling
* Terrain tessellation 
  * currently, project just creates a huge sphere statically depending on the predefined size
  * Instead, do the poly generation (tessellation) in the geometry shader
    * based on distance to eye and position of eye vs sphere
    * know: radius of sphere, position of sphere, position of eye, direction of eye
* Terrain Generation:
  * after tesselation, we have control over poly placement in shader
  * do real terrain generation based on heightmap
* Terrain Generation 2:
  * generate based on biome data instead of heightmap (similar terrain as found in GPU gems)